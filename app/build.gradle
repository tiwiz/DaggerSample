apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "net.orgiu.disample"
        minSdkVersion 21
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.android.support:recyclerview-v7:24.2.0'
    compile 'com.android.support:cardview-v7:24.2.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.android.support:design:24.2.0'

    //Networking
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'

    //Device names
    compile 'com.jaredrummler:android-device-names:1.1.0'

    //Database

    //Logging
    compile 'com.jakewharton.timber:timber:4.2.0'

    //Dependency Injection
    compile 'com.google.dagger:dagger:2.6'
    apt 'com.google.dagger:dagger-compiler:2.6'
    provided 'javax.annotation:jsr250-api:1.0'
}

String getJavaHome(String version) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "/usr/libexec/java_home", "-v", version
        standardOutput = stdout;
    }
    return stdout.toString().trim()
}

import org.gradle.internal.os.OperatingSystem;

task findOs {
    doLast {
        if (OperatingSystem.current().isMacOsX()) {
            println("Adding retrolmbda")
            retrolambda {
                jdk System.getenv("JAVA8_HOME") ?: getJavaHome("1.8")
                oldJdk System.getenv("JAVA7_HOME") ?: getJavaHome("1.7")
            }
        }
    }
}
preBuild.dependsOn findOs
